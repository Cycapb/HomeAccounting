@model WebUI.Models.RegisterModel
@{
    var errors = ViewContext.ViewData.ModelState.Values.Any(x => x.Errors.Any());
}
<script type="text/javascript">
    var hasErrors = @errors.ToString().ToLower() === true ? true : false;
</script>
<div class="card card-signup">
    @using (Ajax.BeginForm(new AjaxOptions()
    {
        HttpMethod = "POST",
        OnBegin = "showPopupLogin",
        OnSuccess = "checkForErrorsAndRedirect",
        UpdateTargetId = "loginFormContainer",
        AllowCache = false,
        Url = Url.Action("Register")
    }))
    {
        @Html.AntiForgeryToken()
        <div class="header header-primary text-center">
            <h4>Регистрация</h4>
        </div>
        @Html.ValidationSummary(true)
        <div class="content">
            <div class="input-group">
                <span class="input-group-addon">
                    <i class="material-icons">face</i>
                </span>
                <div class="label-floating form-group">
                    @Html.LabelFor(x => x.Login, new { @class = "control-label" })
                    @Html.TextBoxFor(x => x.Login, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Login)
                </div>
            </div>
            <div class="input-group">
                <span class="input-group-addon">
                    <i class="material-icons">email</i>
                </span>
                <div class="label-floating form-group">
                    @Html.LabelFor(x => x.Email, new { @class = "control-label" })
                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Email)
                </div>
            </div>
            <div class="input-group">
                <span class="input-group-addon">
                    <i class="material-icons">lock_outline</i>
                </span>
                <div class="label-floating form-group">
                    @Html.LabelFor(x => x.Password, new { @class = "control-label" })
                    @Html.PasswordFor(x => x.Password, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Password)
                </div>
            </div>
            <div class="input-group">
                <span class="input-group-addon">
                    <i class="material-icons">lock_outline</i>
                </span>
                <div class="label-floating form-group">
                    @Html.LabelFor(x => x.ConfirmPassword, new { @class = "control-label" })
                    @Html.PasswordFor(x => x.ConfirmPassword, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.ConfirmPassword)
                </div>
            </div>
        </div>
        <div class="footer text-center">
            <input type="submit" value="Зарегистрироваться" class="btn btn-simple btn-primary btn-lg" />
            @Ajax.ActionLink("Отмена", "Login", new { returnUrl = ViewBag.ReturnUrl }, new AjaxOptions()
       {
           UpdateTargetId = "loginFormContainer"
       }, new { @class = "btn btn-simple btn-primary btn-lg" })
        </div>
    }
</div>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Content/assets/js/material-kit.js"></script>